{
  "question": "Given the code fragment:\nStream<Integer> numStream = Stream.of(10, 20, 30);\nnumStream.map(n -> n * 10); \nnumStream.forEach(s -> System.out.println(s));\n\nStream.of(10, 20, 30).map(n -> n * 10).forEach(n -> { System.out.println(n); });\nWhat is the result?",
  "explanation": "Streams in Java can only be consumed once. The first `numStream` is partially processed with `map`, but the mapped stream is discarded. When `forEach` is called on the same original stream object, it throws a `java.lang.IllegalStateException` at runtime because the stream was already operated upon or closed. The second `Stream.of(...).map(...).forEach(...)` chain would work, but the first part causes the error before it executes.",
  "choices": [
    { "label": "100 200 300 \n100 200 300" },
    { "label": "100200300 \n1000 2000 3000" },
    { "label": "Compilation error" },
    { "label": "Runtime error", "answer": true }
  ]
}
